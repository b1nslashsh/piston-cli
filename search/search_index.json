{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Piston CLI \u00b6 Piston CLI \u00b6 A cli tool which uses the piston api , developed by Engineerman and his team to compile over 35 languages instantly. Accepts files, paste.pythondiscord.com links and input. Installation \u00b6 With pip \u00b6 $ pip install piston-cli -U ---> 100% With Nix/NixOS \u00b6 piston-cli is available in nixpkgs through the unstable channels. You can install it with nix-env , or in a declarative way with configuration.nix or similar. Flake support \u00b6 piston-cli is a flake, that means you can easily add it to your flake based configuration: Disclaimer: this also means you're using the development version, you could encounter bugs. If you want to use the stable version, install it from nixpkgs. { inputs . nixpkgs . url = \"github:nixos/nixpkgs/nixos-unstable\" ; inputs . piston-cli . url = \"github:piston-cli/piston-cli\" ; outputs = { nixpkgs , piston-cli }: let pkgs = import nixpkgs { system = \"x86_64-linux\" ; overlays = [ piston-cli . overlay ]; }; in { # use pkgs.piston-cli-unstable here }; } For Arch/ArchBased \u00b6 With yay $ yay piston-cli ---> 100% With paru $ paru piston-cli ---> 100% Or any AUR helper you use with doesn't matter. You get the point. Example usage \u00b6 Default \u00b6 Shell \u00b6 File \u00b6 Link \u00b6 Languages \u00b6 Themes \u00b6 How to run it? (Contributing) \u00b6 Make sure you are in the project directory. $ poetry install ---> 100% Tip Run poetry run task precommit to install precommit hooks. This runs our register pre-commit hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. To run the project, use the (below) in the project root. $ poetry run task start ---> 100%","title":"Home"},{"location":"#piston-cli","text":"","title":"Piston CLI"},{"location":"#piston-cli_1","text":"A cli tool which uses the piston api , developed by Engineerman and his team to compile over 35 languages instantly. Accepts files, paste.pythondiscord.com links and input.","title":"Piston CLI"},{"location":"#installation","text":"","title":"Installation"},{"location":"#with-pip","text":"$ pip install piston-cli -U ---> 100%","title":"With pip"},{"location":"#with-nixnixos","text":"piston-cli is available in nixpkgs through the unstable channels. You can install it with nix-env , or in a declarative way with configuration.nix or similar.","title":"With Nix/NixOS"},{"location":"#flake-support","text":"piston-cli is a flake, that means you can easily add it to your flake based configuration: Disclaimer: this also means you're using the development version, you could encounter bugs. If you want to use the stable version, install it from nixpkgs. { inputs . nixpkgs . url = \"github:nixos/nixpkgs/nixos-unstable\" ; inputs . piston-cli . url = \"github:piston-cli/piston-cli\" ; outputs = { nixpkgs , piston-cli }: let pkgs = import nixpkgs { system = \"x86_64-linux\" ; overlays = [ piston-cli . overlay ]; }; in { # use pkgs.piston-cli-unstable here }; }","title":"Flake support"},{"location":"#for-archarchbased","text":"With yay $ yay piston-cli ---> 100% With paru $ paru piston-cli ---> 100% Or any AUR helper you use with doesn't matter. You get the point.","title":"For Arch/ArchBased"},{"location":"#example-usage","text":"","title":"Example usage"},{"location":"#default","text":"","title":"Default"},{"location":"#shell","text":"","title":"Shell"},{"location":"#file","text":"","title":"File"},{"location":"#link","text":"","title":"Link"},{"location":"#languages","text":"","title":"Languages"},{"location":"#themes","text":"","title":"Themes"},{"location":"#how-to-run-it-contributing","text":"Make sure you are in the project directory. $ poetry install ---> 100% Tip Run poetry run task precommit to install precommit hooks. This runs our register pre-commit hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. To run the project, use the (below) in the project root. $ poetry run task start ---> 100%","title":"How to run it? (Contributing)"}]}